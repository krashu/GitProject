git config --global user.name "Ashutosh Upadhyay"
 
git config --list
git config --global user.email ashutoshupadhyay217@gmail.com
git config --global init.default branch main
history


// to edit configs in sublime
git config --global --edit

// adding file 
git add --all
git add -A
git add .



// commiting
git commit -m "message"

// commit without adding
git commit -a -m "message"


// logs of commit
git log

// one line log of commit
git log --oneline

Set configuration values for your username and email
git config --global user.name YOUR NAME
git config --global user.email YOUR EMAIL

Set default branch to main
git config --global init.default branch main

Get help on a command
git help COMMAND
git COMMAND -h

Initialize a new git repository
git init

Clone a repository
git clone REPOSITORY URL

Add a file to the staging area
git add FILE

Add all file changes to the staging area
git add --all
git add -A
git add .

Check the unstaged changes
git diff

Commit the staged changes
git commit -m "MESSAGE"

Reset staging area to the last commit
git reset

Check the state of the working directory and the staging area
git status

Remove a file from the index and working directory
git rm FILENAME

Rename a file
git mv (OLD NAME) (NEW NAME)

List the commit history
git log

List all the local branches
git branch

Create a new branch
git branch BRANCH NAME

Rename the current branch
git branch -m NEW_BRANCH_NAME

Delete a branch
git branch -d BRANCH_NAME

Switch to another branch
git switch BRANCH_NAME

Merge specified branch into the current branch
git merge BRANCH NAME

Create a connection to a remote repository
git remote add (NAME) (REPOSITORY URL)

Push the committed changes to a remote directory
git push (REMOTE) (BRANCH)

Download the content from a remote repository
git pull REMOTE

https://github.com/krashu/flask-init-mini.git



--------------------------------------------------------------
In my case, the error was just fatal: refusing to merge unrelated histories on every try, especially the first pull request after remotely adding a Git repository.

Using the --allow-unrelated-histories flag worked with a pull request in this way:

git pull origin main --allow-unrelated-histories

--------------------------------------------------------------
to reset to previous commit or delete last commit 

git reset --hard HEAD^

--------------------------------------------------------------
to update git in windows

git update-git-for-windows

--------------------------------------------------------------
to add upstream to another branch 

git push -u origin BRANCH_NAME

git push --set-upstream origin BRANCH_NAME


--------------------------------------------------------------
to fetch all branch from remote

git fetch --all
--------------------------------------------------------------
Download specific branch from git

git clone <url> --branch <branch> --single-branch [<folder>]



--------------------------------------------------------------
Note that git config --list does display both

the system (<path/to/git/config>), meaning where Git has been installed.
(By default, on Windows: C:\Program Files\Git)
global ($HOME/.gitconfig).
On Windows, $HOME would be %USERPROFILE%
and local (path/to/repo/.git/config) settings.
To see the ones you have added to your repo:

git config --local --list
To remove multiple values:

git config [<file-option>] --unset-all name [value_regex]
git config [<file-option>] --remove-section name
For instance: git config --local --remove-section alias would get rid of the aliases.

That is a bit more precise that just getting rid of the .git/config file.

------------------------------------------------------------------

To rename the `origin` remote in Git, you can use the `git remote rename` command. Hereâ€™s how:

```bash
git remote rename origin new-name
```

Replace `new-name` with your desired name for the remote. For example, if you want to rename `origin` to `upstream`, run:

```bash
git remote rename origin upstream
```

After renaming, you can confirm the change with:

```bash
git remote -v
```

This will list your remotes and show the new name.

To configure vscode for editing 
```
git config --global core.editor "code --wait"
```